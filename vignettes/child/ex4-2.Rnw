
Next, we consider an extension of the Friedman function that is functional in one variable \cite{francom2016sensitivity}. We use
\begin{align}
f(\bx) &= 10\sin(2\pi x_1x_2) + 20(x_3-0.5)^2 + 10x_4 + 5x_5
\end{align}
where we treat $x_1$ as the functional variable.  Note that we insert a two into the sin function in order to increase the variability due to $x_1$, making the problem more challenging.  We generate 500 combinations of $x_2,\dots,x_{10}$ from a uniform hypercube.  We generate a grid of values of $x_1$ of length 50.  This ends up being $500\times 50$ combinations of inputs, for which we evaluate $f$ and add standard Normal error.  We keep the responses in a matrix of dimension $500 \times 50$ so that each row represents a curve.  The inputs are kept separate in a $500\times 9$ matrix and a grid of length 50.
<<c4-1, cache=T>>=
set.seed(0)
f<-function(x) {
  10 * sin(2 * pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - .5)^2 + 
    10 * x[, 4] + 5 * x[, 5]
}
sigma <- 1
n <- 500
n.func <- 50
x.func <- seq(0, 1, length.out = n.func)
x <- matrix(runif(n * 9), n)
y <- matrix(f(cbind(rep(x.func, each = n), 
                    kronecker(rep(1, n.func), x))), 
            ncol = n.func) + rnorm(n * n.func, 0, sigma)
@

The functional data can be plotted as follows and are shown in Figure \ref{fig:ex4plot1}.
<<ex4plot1, fig.height=6*.7, fig.width=8*.7, out.width='.5\\linewidth', fig.cap='500 Functional responses.  The goal is to fit a functional nonparametric regression model and perform sensitivity analysis.'>>=
matplot(x.func, t(y), type='l')
@
In order for the \pkg{BASS} package to handle functional responses, each curve needs to be evaluated on the same grid.  Thus, the responses must be able to be stored as a matrix without missing values.

We fit the model by specifying our matrices \code{x} and \code{y} as well as the grid \code{x.func}.
<<c4-2, cache=T, dependson='c4-1'>>=
mod <- bass(x, y, xx.func = x.func)
@

Prediction is as simple as before.  If we want to predict on a different functional grid, we can specify that in the \code{predict} function with \code{newdata.func}.
<<c4-3, cache=T, dependson='c4-2'>>=
n.test <- 100
x.test <- matrix(runif(n.test * 9), n.test)
pred <- predict(mod, x.test)
@

Following, we make a functional predicted versus observed plot, shown in Figure \ref{fig:ex4plot2}
<<ex4plot2, fig.cap='BASS prediction performance - Friedman function with functional response.', fig.height=6*.7, fig.width=6*.7>>=
fx.test<-matrix(f(cbind(rep(x.func, each = n.test), 
                        kronecker(rep(1, n.func), x.test))), ncol=n.func)
matplot(fx.test, apply(pred, 2:3, mean), type = 'l')
abline(a = 0, b = 1, col = 2)
@

We will demonstrate the two methods of sensitivity analysis discussed in Section \ref{sec:SA}.  First, we can get the Sobol' indices for the functional variable and its interactions just as we do the other variables.  This is the default.
<<c4-4, cache=T, dependson='c4-2'>>=
sens <- sobol(mod, mcmc.use = 1:100)
@
When we plot the variance decomposition, as shown in Figure \ref{fig:ex4plot3}, the functional variable is labeled with the letter ``a."  If we had multiple functional variables, they would be labeled with different letters.
<<ex4plot3, fig.height=6*.7, fig.width=12*.7, out.width='.8\\linewidth', fig.cap='Sensitivity analysis - Friedman function with functional response.'>>=
plot(sens, cex.axis = .5)
@

The other approach to sensitivity analysis is to get a functional variance decomposition.  This is done by using the \code{func.var} parameter.  If there is only one functional variable, we set \code{func.var = 1}.  Otherwise we set \code{func.var} to the column of \code{xx.func} we want to use for our functional variance decomposition.  This will be explained in more detail in a later example.
<<c4-5, cache=T, dependson='c4-2'>>=
sens.func <- sobol(mod, mcmc.use = 1:100, func.var = 1)
@
When we plot the variance decomposition, shown in Figure \ref{fig:ex4plot4}, we we get two plots.  
<<ex4plot4, fig.height=6*.7, fig.width=12*.7, out.width='.8\\linewidth', fig.cap='Functional sensitivity analysis - Friedman function with functional response.'>>=
plot(sens.func)
@
The left plot shows the posterior mean (using posterior samples specified with \code{mcmc.use}) of the functional sensitivity indices in a functional pie chart.  The right plot shows the variance decomposition as a function of the functional variable.  Thus, the top line in the right plot is the total variance in $y$ as a function of $x_1$.  The bottom line (black) is the total variance explained by the main effect of $x_2$ as a function of $x_1$.  The labels in the plot on the left are the variable numbers (columns of \code{x}).