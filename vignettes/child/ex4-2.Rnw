
Next, we consider an extension of the Friedman function that is functional in one variable \cite{francom2018sensitivity}. We use
\begin{align}
f(\bx) &= 10\sin(2\pi x_1x_2) + 20(x_3-0.5)^2 + 10x_4 + 5x_5
\end{align}
where we treat $x_1$ as the functional variable.  Note that we insert a two into the sin function in order to increase the variability due to $x_1$ and $x_2$, making the problem more challenging.  We generate 500 combinations of $x_2,\dots,x_{10}$ from a uniform hypercube.  We generate a grid of values of $x_1$ of length 50.  This ends up being $500\times 50$ combinations of inputs, for which we evaluate $f$ and add standard Normal error.  We keep the responses in a matrix of dimension $500 \times 50$ so that each row represents a curve.  The inputs are kept separate in a $500\times 9$ matrix and a grid of length 50.
<<c4-1, cache=T>>=
set.seed(0)
f<-function(x) {
  10 * sin(2 * pi * x[, 1] * x[, 2]) + 20 * (x[, 3] - .5)^2 +
    10 * x[, 4] + 5 * x[, 5]
}
sigma <- 1
n <- 500
n.func <- 50
x.func <- seq(0, 1, length.out = n.func)
x <- matrix(runif(n * 9), n)
y <- matrix(f(cbind(rep(x.func, each = n),
                    kronecker(rep(1, n.func), x))),
            ncol = n.func) + rnorm(n * n.func, 0, sigma)
@

The functional data can be plotted as follows and are shown in Figure \ref{fig:ex4plot1}.
<<ex4plot1, fig.height=6*.7, fig.width=8*.7, out.width='.5\\linewidth', fig.cap='500 Functional responses.  The goal is to fit a functional nonparametric regression model and perform sensitivity analysis.'>>=
matplot(x.func, t(y), type='l')
@
In order for the \pkg{BASS} package to handle functional responses, each curve needs to be evaluated on the same grid.  Thus, the responses must be able to be stored as a matrix without missing values.

\subsubsection{Augmentation approach}
We fit the augmentation functional response model by specifying our matrices \code{x} and \code{y} as well as the grid \code{x.func}.
<<c4-2, cache=T, dependson='c4-1'>>=
mod <- bass(x, y, xx.func = x.func)
@

Prediction is as simple as before.  If we want to predict on a different functional grid, we can specify that in the \code{predict} function with \code{newdata.func}.
<<c4-3, cache=T, dependson='c4-2'>>=
n.test <- 100
x.test <- matrix(runif(n.test * 9), n.test)
pred <- predict(mod, x.test)
@

Following, we make a functional predicted versus observed plot, shown in Figure \ref{fig:ex4plot2}.
<<ex4plot2, fig.cap='BASS prediction performance - Friedman function with functional response.', fig.height=6*.7, fig.width=6*.7>>=
fx.test<-matrix(f(cbind(rep(x.func, each = n.test),
                        kronecker(rep(1, n.func), x.test))), ncol=n.func)
matplot(t(fx.test), t(apply(pred, 2:3, mean)), type = 'l')
abline(a = 0, b = 1, col = 2)
@

We will demonstrate the two methods of sensitivity analysis discussed in Section \ref{sec:SA}.  First, we can get the Sobol' indices for the functional variable and its interactions just as we do the other variables.  This is the default.
<<c4-4, cache=T, dependson='c4-2'>>=
sens <- sobol(mod, mcmc.use = 1:100)
@
When we plot the variance decomposition, as shown in Figure \ref{fig:ex4plot3}, the functional variable is labeled with the letter ``a."  If we had multiple functional variables, they would be labeled with different letters.
<<ex4plot3, fig.height=6*.7, fig.width=12*.7, out.width='.8\\linewidth', fig.cap='Sensitivity analysis - Friedman function with functional response.'>>=
plot(sens, cex.axis = .5)
@

The other approach to sensitivity analysis is to get a functional variance decomposition.  This is done by using the \code{func.var} parameter.  If there is only one functional variable, we set \code{func.var = 1}.  Otherwise we set \code{func.var} to the column of \code{xx.func} we want to use for our functional variance decomposition.
<<c4-5, cache=T, dependson='c4-2'>>=
sens.func <- sobol(mod, mcmc.use = 1:100, func.var = 1)
@
When we plot the variance decomposition, shown in Figure \ref{fig:ex4plot4}, we we get two plots.
<<ex4plot4, fig.height=6*.7, fig.width=12*.7, out.width='.8\\linewidth', fig.cap='Functional sensitivity analysis - Friedman function with functional response.'>>=
plot(sens.func)
@
The left plot shows the posterior mean (using posterior samples specified with \code{mcmc.use}) of the functional sensitivity indices in a functional pie chart.  The right plot shows the variance decomposition as a function of the functional variable.  Thus, the top line in the right plot is the total variance in $y$ as a function of $x_1$.  The bottom line (black) is the total variance explained by the main effect of $x_2$ as a function of $x_1$.  The labels in the plot on the left are the variable numbers (columns of \code{x}).


\subsubsection{Basis expansion approach}
We will utilize parallel computing in the following examples.  The \pkg{BASS} functions that can utilize multiple threads can do so in two ways: fork or socket, specified with the \code{parType} option.  We recommend the fork method, though that is not available on Windows.  We would usually specify \code{n.cores = parallel::detectCores()} in these functions, but for the purposes of making this document compile on CRAN, we limit the number of threads used with the following specification.
<<>>=
if(.Platform$OS.type == 'unix'){
  nc <- 2
} else{
  nc <- 1
}
@
We should also point out that this kind of explicit parallelism sometimes does not play well with multithreading that comes from BLAS.  Functions in the BASS package benefit from both forms of parallelism, though we would prefer the explicit parallelism over the multithreading when possible (which seems to happen by default when using openBLAS).


The basis approach to functional response modeling using a principal component basis can be done as follows:
<<c4-6, cache=T, dependson=c('c4-1','c4-3')>>=
mod.pca <- bassPCA(x, y, perc.var = 95, n.cores = nc)
pred.pca <- predict(mod.pca, x.test)
sens.func.pca <- sobolBasis(mod.pca, int.order = 2, mcmc.use = 100,
                            n.cores = nc, verbose = F)
@
The optional \code{perc.var} argument specifies how many principal components should be used in terms of the percent of variance explained.  We could alternately specify \code{n.pc}.  Then \code{n.pc} BASS models are fit independently, using \code{n.cores} threads.  To limit computation, the \code{sobolBasis} function requires a specified highest degree of interaction in the decomposition, \code{int.order}, and a single MCMC sample to use, \code{mcmc.use}.  This function benefits from having many threads (often more so than \code{bassPCA}). Figure \ref{fig:ex4plot5} shows the functional variance decomposition.
<<ex4plot5, fig.height=6*.7, fig.width=12*.7, out.width='.8\\linewidth', fig.cap='Functional sensitivity analysis, PCA space - Friedman function with functional response.'>>=
plot(sens.func.pca)
@

The \code{bassPCA} function is a shortcut to the \code{bassBasis} function when we want to use a principal component basis.  For other bases, we use the \code{bassBasis} function directly.  We demonstrate this with a wavelet basis below.

First, we must interpolate our functional response data onto a grid of power two.
<<>>=
pow2 <- floor(log2(ncol(y)))
y.pow2 <- matrix(nrow = n, ncol = 2^pow2)
for(i in 1:n) {
  y.pow2[i,] <- approx(1:ncol(y), y[i, ],
                     xout = seq(1, ncol(y), length.out = 2^pow2))$y
}
@
Then we (optionally) subtract the mean function from each functional response.
<<>>=
y.pow2.mean <- colMeans(y.pow2)
y.pow2.scale <- sweep(y.pow2, 2, y.pow2.mean)
@
We use the \pkg{wmtsa} package \citep{wmtsa} to perform the wavelet decomposition for each functional response.
<<>>=
library(wmtsa)
coefs.mat <- matrix(nrow = 2^pow2, ncol = n)
for(i in 1:nrow(y.pow2.scale)) {
  w <- wavDWT(y.pow2.scale[i, ])
  coefs.mat[, i] <- unlist(w$data)
}
@
We then threshold the wavelet coefficients at 5\% of the largest magnitude wavelet coefficient.
<<>>=
thresh <- .05*max(abs(coefs.mat))
use<-unique(which(coefs.mat > thresh, arr.ind = T)[, 1])
@
Finally, we specify the matrix of basis functions and our reduced dimension response as part of the list that will be passed to the \code{bassBasis}.
<<>>=
basis <- t(wavDWTMatrix(J = pow2, wavelet = "s8"))[ ,use]
newy <- coefs.mat[use, ]
dat<-list(xx = x, y = y.pow2, n.pc = ncol(basis), basis = basis, newy = newy,
          y.m = y.pow2.mean, y.s = rep(1, 2^pow2))
@
Then we can call the \code{bassBasis}, \code{predict}, and \code{sobolBasis} functions.
<<c4-7, cache=T, dependson=c('c4-1','c4-3')>>=
mod.wv <- bassBasis(dat, n.cores = nc)
pred.wv <- predict(mod.wv, x.test)
sens.func.wv<-sobolBasis(mod.wv, int.order = 2, mcmc.use = 100,
                            n.cores = nc, verbose = F)
@

To compare predictions, we first interpolate our test data onto a grid of power two.
<<>>=
fx.test.pow2 <- matrix(nrow = n.test, ncol = 2^pow2)
for(i in 1:n.test) {
  fx.test.pow2[i,] <- approx(1:ncol(fx.test), fx.test[i, ],
                     xout = seq(1, ncol(fx.test), length.out = 2^pow2))$y
}
@
The prediction accuracy plots for the PCA basis approach and the wavelet basis approach are shown in Figure \ref{fig:ex4plot6}.
<<ex4plot6, fig.cap='BASS prediction performance, PCA (left) and wavelet (right) space - Friedman function with functional response.', fig.height=6*.7, fig.width=6*.7*2, out.width='.8\\linewidth'>>=
par(mfrow=c(1,2))
matplot(t(fx.test), t(apply(pred.pca, 2:3, mean)), type = 'l')
abline(a = 0, b = 1, col = 2)
matplot(t(fx.test.pow2), t(apply(pred.wv, 2:3, mean)), type = 'l')
abline(a = 0, b = 1, col = 2)
@
Finally, we also show the functional Sobol decomposition in Figure \ref{fig:ex4plot7}.
<<ex4plot7, fig.height=6*.7, fig.width=12*.7, out.width='.8\\linewidth', fig.cap='Functional sensitivity analysis, wavelet space - Friedman function with functional response.'>>=
plot(sens.func.wv)
@
