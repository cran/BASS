
The final example we present is an emulation problem.  The simulator is for modeling a pollutant spill caused by a chemical accident, obtained from \cite{simulationlib}.  While fast to evaluate, this simulator provides a good testbed for BASS methods.  The simulator has four inputs: (1) mass of pollutant spilled at each of two locations (range 7--13), (2) diffusion rate in the channel (0.02--0.12), (3) location of the second spill (0.01--3), and (4) time of the second spill (30.01--30.295). The simulator outputs a function in space (one dimension) and time that is the concentration of the pollutant.

<<include=FALSE>>=
environ <- function(xx, s=c(0.5, 1, 1.5, 2, 2.5), t=seq(from=0.3, to=60, by=0.3))
{
  ##########################################################################
  #
  # ENVIRONMENTAL MODEL FUNCTION
  #
  # Authors: Sonja Surjanovic, Simon Fraser University
  #          Derek Bingham, Simon Fraser University
  # Questions/Comments: Please email Derek Bingham at dbingham@stat.sfu.ca.
  #
  # Copyright 2013. Derek Bingham, Simon Fraser University.
  #
  # THERE IS NO WARRANTY, EXPRESS OR IMPLIED. WE DO NOT ASSUME ANY LIABILITY
  # FOR THE USE OF THIS SOFTWARE.  If software is modified to produce
  # derivative works, such modified software should be clearly marked.
  # Additionally, this program is free software; you can redistribute it
  # and/or modify it under the terms of the GNU General Public License as
  # published by the Free Software Foundation; version 2.0 of the License.
  # Accordingly, this program is distributed in the hope that it will be
  # useful, but WITHOUT ANY WARRANTY; without even the implied warranty
  # of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  # General Public License for more details.
  #
  # For function details and reference information, see:
  # http://www.sfu.ca/~ssurjano/
  #
  ##########################################################################
  #
  # OUTPUT AND INPUTS:
  #
  # y = row vector of scaled concentrations of the pollutant at the
  #     space-time vectors (s, t)
  #     Its structure is:
  #     y(s_1, t_1), y(s_1, t_2), ..., y(s_1, t_dt), y(s_2, t_1), ...,
  #     y(s_2,t_dt), ..., y(s_ds, t_1), ..., y(s_ds, t_dt)
  # xx = c(M, D, L, tau)
  # s = vector of locations (optional), with default value
  #     c(0.5, 1, 1.5, 2, 2.5)
  # t = vector of times (optional), with default value
  #     c(0.3, 0.6, ..., 50.7, 60)
  #
  ##########################################################################

  M   <- xx[1]
  D   <- xx[2]
  L   <- xx[3]
  tau <- xx[4]

  ds <- length(s)
  dt <- length(t)
  dY <- ds * dt
  Y <- matrix(0, ds, dt)

  # Create matrix Y, where each row corresponds to si and each column
  # corresponds to tj.
  for (ii in 1:ds) {
    si <- s[ii]
    for (jj in 1:dt) {
      tj <- t[jj]

      term1a <- M / sqrt(4*pi*D*tj)
      term1b <- exp(-si^2 / (4*D*tj))
      term1 <- term1a * term1b

      term2 <- 0
      if (tau < tj) {
        term2a <- M / sqrt(4*pi*D*(tj-tau))
        term2b <- exp(-(si-L)^2 / (4*D*(tj-tau)))
        term2 <- term2a * term2b
      }

      C <- term1 + term2
      Y[ii, jj] <- sqrt(4*pi) * C
    }
  }

  # Convert the matrix into a vector (by rows).
  Yrow <- t(Y)
  y <- t(as.vector(Yrow))
  return(y)
}


# M ∈ [7, 13]	mass of pollutant spilled at each location
# D ∈ [0.02, 0.12]	diffusion rate in the channel
# L ∈ [0.01, 3]	location of the second spill
# τ ∈ [30.01, 30.295]   	time of the second spill
@

We generate 1000 combinations of the four simulator inputs uniformly from within their respective ranges.
<<c6-1, cache=T>>=
set.seed(0)
n <- 1000
x <- cbind(runif(n, 7, 13), runif(n, 0.02, 0.12), runif(n, 0.01, 3),
           runif(n, 30.01, 30.295))
@
We specify six points in space and 20 time points.  The functional grid that would be passed to the function \code{bass} would thus have two columns, called \code{x.func} below.
<<c6-2, cache=T>>=
s <- c(0, 0.5, 1, 1.5, 2, 2.5)
t <- seq(0.3, 60, length.out = 20)
x.func <- expand.grid(t, s)
@
We will show results when using the \code{bassPCA} function rather than the \code{bass} function for this problem.  The reader may wish to test different parameter ranges, numbers of simulations, and functional response modeling approaches.  Our experience is that the \code{bassPCA} function performs quite well for this problem, and that various BASS models can handle tens of thousands of model runs.

We use the function \code{environ} available from \url{http://www.sfu.ca/~ssurjano/Code/environr.html} to generate realizations of the simulator.  We will model the log of the simulator output, though plume models like this may deserve better thought out transformations, as in \cite{bliznyuk2008bayesian}.
<<c6-3, cache=T, dependson=c('c6-1','c6-2')>>=
out <- t(apply(x, 1, environ, s = s, t = t))
y <- log(out + 0.01)
@

The model is fit as follows.
<<c6-4, cache=T, dependson='c6-3'>>=
mod <- bassPCA(x, y, n.pc = 20, save.yhat = FALSE,
               n.cores = nc, verbose = FALSE)
@
Note that we specify \code{save.yhat = FALSE}.  By default, the \code{bass} function saves in-sample predictions for all MCMC samples (post burn-in and thinned).  This can be a significant storage burden when we have large amounts of functional data, as we do in this case.  Changing the \code{save.yhat} parameter can relieve this.  If in-sample predictions are of interest, they can be obtained after model fitting using the \code{predict} function.

As with the previous example, prediction here is for the mean function.  Whatever error is left over (in $\sigma^2$) is inability of the BASS model to pick up high frequency signal.
<<c6-5, cache=T, dependson='c6-4'>>=
n.test <- 1000
x.test <- cbind(runif(n.test, 7, 13),runif(n.test, 0.02, 0.12),
              runif(n.test, 0.01, 3), runif(n.test, 30.01, 30.295))
y.test <- log(t(apply(x.test, 1, environ, s = s, t = t)) + 0.01)
pred <- predict(mod, x.test)
@
A plot of the predicted (mean function) versus observed data is shown in Figure~\ref{fig:ex6plot1}.
<<ex6plot1, fig.cap='BASS prediction performance -- pollutant spill model.',dev='png', dpi=150>>=
plot(y.test, apply(pred, 2:3, mean))
abline(a = 0, b = 1, col = 2)
@

To see what the predictions look like in space and time, consider the plots shown in Figure~\ref{fig:ex6plot2}.  These show posterior draws (in gray) of the mean function for one setting of the four inputs along with simulator output (in red).
<<ex6plot2, fig.height=10*.7, fig.width=12*.7, out.width='\\linewidth', fig.cap='BASS prediction in space and time -- pollutant spill model.', out.extra='trim = 0 5 0 10, clip'>>=
pp <- pred[, 1, ]
ylim <- range(y)
par(mfrow=c(2, 3))
for(i in 1:length(s)) {
  ind <- length(t) * (i - 1) + 1:length(t)
  matplot(t, t(pp[, ind]), type = "l", col = "lightgray",
          ylim = ylim, main = paste("s =", s[i]))
  lines(t, y.test[1, ind], col = 2, lwd = 2, lty = 2)
}
@

Below, we show how to get spatio-temporal Sobol' indices.  We limit the models considered using \code{mcmc.use} to speed up computations.
<<c6-6, cache=T, dependson='c6-4'>>=
sens.func <- sobolBasis(mod, mcmc.use = 1, int.order = 2, verbose = FALSE,
                          n.cores = nc)
@
To show plots of the Sobol' indices over space and time, we can use a similar approach to what we used to show predictions, above.  Here, we limit the effects shown by thresholding their integrated variance, where we use 1\% of the integrated total variance as the cutoff.
<<ex6plot3, fig.height=10*.7, fig.width=12*.7, out.width='\\linewidth', fig.cap='Variance decomposition as a function of space and time -- pollutant spill model.', out.extra='trim = 0 5 0 10, clip'>>=
use <- which(apply(sens.func$S.var, 2, mean) > mean(sens.func$Var.tot) * 0.01)
par(mfrow=c(2, 3))
for(i in 1:length(s)) {
  ind <- length(t) * (i - 1) + 1:length(t)
  plot(t, sens.func$Var.tot[ind, 1], type = "l", lwd = 3,
       ylim = c(0, max(sens.func$Var.tot[ind, 1])), ylab = "variance",
       col = "lightgray", main = paste("s =", s[i]))
  matplot(t, t(sens.func$S.var[1, use,ind]), type = "l",
          main = paste("s =", s[i]), add = TRUE, col = 2:5, lwd = 2)
}
legend("topright", c(sens.func$names.ind[use], "total"),
       col = c(2:5, "lightgray"), lty = c(1:4, 1), lwd = c(rep(2, 4), 3))
@
These plots demonstrate that, for most spatial locations, the time series of variance has two peaks for the two different spills.  Within the range we have selected, the first input, pollutant mass, has fairly uniform influence across the time series.  The second input, the diffusion rate in the channel has a very large influence on the concentration of the pollutant during the first spill, while the third input, the location of the second spill, has the largest effect on the concentration during the second spill.  These two inputs have a small interaction effect that is most prominent at the beginning of the second spill.  Notably, the fourth parameter, the time of the second spill, has no effect, likely because the range used for that parameter was very small.
