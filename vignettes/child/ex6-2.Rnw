
The final example we present is an emulation problem.  The simulator is for modeling a pollutant spill caused by a chemical accident, obtained from \cite{simulationlib}.  While fast to evaluate, this simulator provides a good testbed for BASS methods.  The simulator has four inputs: (1) Mass of pollutant spilled at each of two locations (range $7-13$), (2) diffusion rate in the channel ($0.02-0.12$), (3) location of the second spill ($0.01-3$), and (4) time of the second spill ($30.01-30.295$). The simulator outputs a function in space (one dimension) and time that is the concentration of the pollutant.  

<<include=FALSE>>=
environ <- function(xx, s=c(0.5, 1, 1.5, 2, 2.5), t=seq(from=0.3, to=60, by=0.3))
{
  ##########################################################################
  #
  # ENVIRONMENTAL MODEL FUNCTION
  #
  # Authors: Sonja Surjanovic, Simon Fraser University
  #          Derek Bingham, Simon Fraser University
  # Questions/Comments: Please email Derek Bingham at dbingham@stat.sfu.ca.
  #
  # Copyright 2013. Derek Bingham, Simon Fraser University.
  #
  # THERE IS NO WARRANTY, EXPRESS OR IMPLIED. WE DO NOT ASSUME ANY LIABILITY
  # FOR THE USE OF THIS SOFTWARE.  If software is modified to produce
  # derivative works, such modified software should be clearly marked.
  # Additionally, this program is free software; you can redistribute it
  # and/or modify it under the terms of the GNU General Public License as
  # published by the Free Software Foundation; version 2.0 of the License.
  # Accordingly, this program is distributed in the hope that it will be
  # useful, but WITHOUT ANY WARRANTY; without even the implied warranty
  # of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  # General Public License for more details.
  #
  # For function details and reference information, see:
  # http://www.sfu.ca/~ssurjano/
  #
  ##########################################################################
  #
  # OUTPUT AND INPUTS:
  #
  # y = row vector of scaled concentrations of the pollutant at the
  #     space-time vectors (s, t)
  #     Its structure is:
  #     y(s_1, t_1), y(s_1, t_2), ..., y(s_1, t_dt), y(s_2, t_1), ...,
  #     y(s_2,t_dt), ..., y(s_ds, t_1), ..., y(s_ds, t_dt)
  # xx = c(M, D, L, tau)
  # s = vector of locations (optional), with default value
  #     c(0.5, 1, 1.5, 2, 2.5)
  # t = vector of times (optional), with default value
  #     c(0.3, 0.6, ..., 50.7, 60)
  #
  ##########################################################################
  
  M   <- xx[1]
  D   <- xx[2]
  L   <- xx[3]
  tau <- xx[4]
  
  ds <- length(s)
  dt <- length(t)
  dY <- ds * dt
  Y <- matrix(0, ds, dt)
  
  # Create matrix Y, where each row corresponds to si and each column
  # corresponds to tj.
  for (ii in 1:ds) {
    si <- s[ii]
    for (jj in 1:dt) {
      tj <- t[jj]
      
      term1a <- M / sqrt(4*pi*D*tj)
      term1b <- exp(-si^2 / (4*D*tj))
      term1 <- term1a * term1b
      
      term2 <- 0
      if (tau < tj) {
        term2a <- M / sqrt(4*pi*D*(tj-tau))
        term2b <- exp(-(si-L)^2 / (4*D*(tj-tau)))
        term2 <- term2a * term2b
      }
      
      C <- term1 + term2
      Y[ii, jj] <- sqrt(4*pi) * C
    }
  }
  
  # Convert the matrix into a vector (by rows).
  Yrow <- t(Y)
  y <- t(as.vector(Yrow))
  return(y)
}


# M ∈ [7, 13]	mass of pollutant spilled at each location
# D ∈ [0.02, 0.12]	diffusion rate in the channel
# L ∈ [0.01, 3]	location of the second spill
# τ ∈ [30.01, 30.295]   	time of the second spill
@

We generate 10000 combinations of the four simulator inputs uniformly from within their respective ranges.  
<<c6-1, cache=T>>=
set.seed(0)
n <- 10000
x <- cbind(runif(n, 7, 13), runif(n, .02, .12), runif(n, .01, 3),
           runif(n, 30.01, 30.295))
@
We specify six points in space and 20 time points.  The functional grid we will pass to the \code{bass} function will thus have two columns, called \code{x.func} below.
<<c6-2, cache=T>>=
s <- c(0, 0.5, 1, 1.5, 2, 2.5)
t <- seq(.3, 60, length.out = 20)
x.func <- expand.grid(t, s)
@
We use the \code{environ} function available from \url{http://www.sfu.ca/~ssurjano/Code/environr.html} to generate realizations of the simulator.  We will model the log of the simulator output.
<<c6-3, cache=T, dependson=c('c6-1','c6-2')>>=
out <- t(apply(x, 1, environ, s = s, t = t))
y <- log(out + .01)
@

With this amount of data, we are presented with an extremely large model space to search through.  In addition, since the data are smooth (no random noise), BASS models will tend to allocate a very large number of basis functions to try to capture the smoothness.  In order to compensate for the large model space and the smoothness, we need to set an extreme prior on the number of basis functions to have a managable model.  We do this by increasing \code{h2} by many orders of magnitude.  In this example, we set \code{h2 = 1e250}.  This results in a prior for the number of basis functions with very heavy weight near zero.  Because of the large amount of data, we still get hundreds of basis functions.

Using such an extreme prior makes our multimodal posterior more peaked, and more difficult to explore.  We may need hundreds of chains running at different temperatures in order to get the temperatures close enough to eachother to allow for frequent swapping.  Another possibility that does not require picking a temperature ladder is to instead run multiple cold chains (at the true posterior) and allow them to swap states.  This is a version of parallel hierarchical sampling introduced in \cite{rigat2012parallel} that can be easily implemented by setting \code{temp.ladder = rep(1, n.chains)}.
<<c6-4, cache=T, dependson='c6-3'>>=
mod <- bass(x, y, xx.func = x.func, nmcmc = 110000, nburn = 100000, 
            thin = 10, h2 = 1e250, save.yhat = F, temp.ladder = rep(1, 10), 
            npart.func = 1, verbose = F, maxBasis = 175)
@
Note that we specify \code{save.yhat = F}.  By default, the \code{bass} function saves in-sample predictions for all MCMC samples (post burn-in and thinned).  This can be a sigificant storage burden when we have large amounts of functional data, as we do in this case.  Changing the \code{save.yhat} parameter can relieve this.  If in-sample predictions are of interest, they can be obtained after model fitting using the \code{predict} function.

As with the previous example, prediction here is for the mean function.  Whatever error is left over (in $\sigma^2$) is inability of the BASS model to pick up high frequency signal.
<<c6-5, cache=T, dependson='c6-4'>>=
n.test <- 1000
x.test <- cbind(runif(n.test, 7, 13),runif(n.test, .02, .12),
              runif(n.test, .01, 3), runif(n.test, 30.01, 30.295))
y.test <- log(t(apply(x.test, 1, environ, s = s, t = t)) + .01)
pred <- predict(mod, x.test)
@
A plot of the predicted (mean function) versus observed data is shown in Figure \ref{fig:ex6plot1}.
<<ex6plot1, fig.cap='BASS prediction performance - pollutant spill model.',dev='png', fig.height=6*.7, fig.width=6*.7>>=
plot(y.test, apply(pred, 2:3, mean))
abline(a = 0, b = 1, col = 2)
@

To see what the predictions look like in space and time, consider the plots shown in Figure \ref{fig:ex6plot2}.  These show posterior draws (in grey) of the mean function for one setting of the four inputs along with simulator output (in red).
<<ex6plot2, fig.height=10*.7, fig.width=12*.7, out.width='\\linewidth', fig.cap='BASS prediction in space and time - pollutant spill model.'>>=
pp <- pred[, 1, ]
ylim <- range(y)
par(mfrow=c(2, 3))
for(i in 1:length(s)) {
  ind <- length(t) * (i - 1) + 1:length(t)
  matplot(t, t(pp[, ind]), type = 'l', col = 'lightgrey', 
          ylim = ylim, main = paste('s =', s[i]))
  lines(t, y.test[1, ind], col = 2, lwd = 2, lty = 2)
}
@

We can use the sensitivity analysis methods above, but we can get Sobol' indices as a function of either space or time.  Below, we show how to get them as a function of time.  We limit the models considered using \code{mcmc.use} to speed up computations.  Since we have two functional inputs, we have two letters that can be included in these sensitivity plots (functional inputs are labeled with letters).  Note that variable four is not included.  This is because it did not explain any variance.
<<ex6plot3, cache=T, fig.height=6*.7, fig.width=12*.7, out.width='.8\\linewidth', fig.cap='Sensitivity indices as a function of time - pollutant spill model.'>>=
sens.func1 <- sobol(mod, mcmc.use = 1,#seq(1, 1000, 100),
                    func.var = 1, xx.func.var = t, verbose = F)
plot(sens.func1)
@
  